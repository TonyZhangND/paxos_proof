#lang ivy1.7

type state = {initial, prepared, committed, aborted}
type rm 

relation agree(X:rm)    # X agrees in the vote
relation commit(X:rm)   # TM orders X to commit
relation abort(X:rm)    # TM orders X to abort

function rm_state(X:rm) : state 
individual tm_state : state

after init {
    # RM's and TM's are in initial state
    rm_state(X) := initial;
    tm_state := initial;

    # No votes or decision sent
    agree(X) := false;
    commit(X) := false;
    abort(X) := false
}

# RM x agrees to the transaction
action rm_agree(x:rm) = {
    require rm_state(x) = initial;
    agree(x) := true;
    rm_state(x) := prepared
}

# RM x disagrees to the transaction
action rm_disagree(x:rm) = {
    require rm_state(x) = initial;
    rm_state(x) := prepared
}

# TM makes a decision
action tm_decide = {
    require tm_state = initial & rm_state(X) = prepared;
    if some x:rm. ~agree(x) {
        abort(X) := true;
        tm_state := aborted
    } else {
        commit(X) := true;
        tm_state := committed
    }
}

# RM receives commit decision
action rm_commit(x:rm) = {
    require rm_state(x) = prepared & commit(x);
    rm_state(x) := committed
}

# RM receives abort decision
action rm_abort(x:rm) = {
    require rm_state(x) = prepared & abort(x);
    rm_state(x) := aborted
}

export rm_agree
export rm_disagree
export tm_decide
export rm_commit
export rm_abort



# Safety 1: All processes reach the same decision
invariant ~(X ~= Y & rm_state(X) = aborted & rm_state(Y) = committed)  

# Safety 2: Commit decision can only be reached if all RM vote agree
invariant ~(rm_state(X) = committed & rm_state(Y) ~= initial & ~agree(Y))

# Safety 3: If all RM vote agree, then decision must be commit
invariant (forall X. agree(X) | rm_state(X) = initial) -> (forall X. rm_state(X) ~= aborted)


######################################## Proof ###########################################

# TM does not send both abort and commit
invariant commit(X) -> ~abort(Y)

# If all RM vote agree, then TM must broadcast commit
invariant (forall X. agree(X)) -> (forall Y. ~abort(Y))

# No one has decided until leader has decided
invariant (exists X. rm_state(X) = committed) -> (tm_state = committed) 
invariant (exists X. rm_state(X) = aborted) -> (tm_state = aborted)

# Leader does not decide until everyone has voted
invariant (tm_state = committed | tm_state = aborted) -> (forall X. ~rm_state(X) = initial)

# No aborts or commits sent until leader has decided
invariant (exists X. abort(X) | commit(X)) -> (tm_state ~= initial)

# TM state matches abort/commit broadcast
invariant tm_state = committed ->  forall X. commit(X)
invariant tm_state = aborted ->  forall X. abort(X)

# TM does not enter prepared state
invariant tm_state ~= prepared

# TM can commit if and only if all RM voted agree
invariant tm_state = committed -> forall X. agree(X)
invariant tm_state = aborted -> (exists X. ~agree(X) & rm_state(X) ~= initial)



# Finite-instance MC
# interpret rm -> {0..10}
# attribute method = mc

# Bounded MC
# attribute method = bmc[10]