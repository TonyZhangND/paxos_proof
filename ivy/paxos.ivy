#lang ivy1.7

include order

type node
type value
type quorum
instance round : unbounded_sequence

relation member(N:node, Q:quorum)
trusted isolate quorum_intersection = {
    axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)
}

# first, the absract protocol:
isolate abs = {
    relation left_rnd(N:node, R:round)
    relation proposal(R:round, V:value)
    relation vote(N:node, R:round, V:value)
    relation decision(N:node, R:round, V:value)

    after init {
        left_rnd(N,R) := false;
        proposal(R,V) := false;
        vote(N,R,V) := false;
        decision(N,R,V) := false;
    }

    # join_round(n, r) means that node n has not refused round r, and will henceforth
    # refuse all rounds R < r. I.e., node n promises ballot r.
    action join_round(n:node, r:round) = {
        require ~left_rnd(n,r);
        left_rnd(n,R) := left_rnd(n,R) | R < r 
    }

    action propose(r:round, q:quorum, maxr:round, v:value) = {
        # No other values proposed for this round
        require ~(proposal(r,V) & v ~= V);     
        # No node pre-empted me in phase 1
        require forall N. member(N, q) -> ~left_rnd(N,r);
        # Every node promised r
        require forall N, R. member(N, q) & R < r -> left_rnd(N,R);

        # find the maximal max_vote in the quorum
        require (
                # No one in this quorum has previously accepted any value
                (forall N,R,V. ~(member(N, q) & R < r & vote(N,R,V)))
            | (
                # Some member of q accepted v using maxR
                (exists N. member(N, q) & maxr < r & vote(N,maxr,v)) &
                # forall members of q, if I accepted any value V, it is with ballot R <= maxr < r
                (forall N,R,V. (member(N, q) & R  < r & vote(N,R,V)) -> R <= maxr))
        );
        proposal(r, v) := true;
    }

    action cast_vote(n:node, v:value, r:round) = {
        # Node n has not yet refused round r
        require ~left_rnd(n,r);
        # Node round r has proposed value v
        require proposal(r, v);
        vote(n, r, v) := true;
        # Node n promises r, i.e. refuse all smaller rounds
        left_rnd(n,R) := left_rnd(n,R) | R <= r
    }

    action decide(n:node, r:round, v:value, q:quorum) = {
        # Every member of a quorum q accepted v in round r
        require forall N . member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true
    }

    specification {
        # safety property:
        conjecture [safety] (
            decision(N1,R1,V1) &
            decision(N2,R2,V2)
        ) -> V1 = V2
    }

    private {
        # proposals are unique per round
        conjecture proposal(R,V1) & proposal(R,V2) -> V1 = V2

        # only vote for proposed values
        conjecture vote(N,R,V) -> proposal(R,V)

        # decisions come from quorums of votes:
        conjecture forall R, V. (exists N. decision(N,R,V)) -> exists Q. forall N. member(N, Q) -> vote(N,R,V)

        # Properties of choosable and proposal
        # If proposal(R2,V2), then in every quorum Q, there must be some member that has
        # refused R1, and also not accepted a different value V1 for R1
        conjecture forall R1, R2, V1, V2, Q. R1 < R2 & proposal(R2,V2) & V1 ~= V2 ->
            exists N . member(N,Q) & left_rnd(N,R1) & ~vote(N,R1,V1)
    }
    
    export join_round
    export propose
    export cast_vote
    export decide

    # attribute method = bmc[20]

} with round, quorum_intersection